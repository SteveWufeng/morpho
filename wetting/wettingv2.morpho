import meshtools
import plot
import optimize
var cube = PolyhedronMesh(
    [[-0.5,-0.5,0],
     [-0.5,0.5,0],
     [0.5,-0.5,0],
     [0.5,0.5,0],
     [-0.5,-0.5,1],
     [-0.5,0.5,1],
     [0.5,-0.5,1],
     [0.5,0.5,1]],
    [[0,1,5,4],
     [2,3,7,6],
     [1,3,7,5],
     [0,2,6,4],
     [4,5,7,6]])
// var before = plotmesh(cube, grade=[0,1,2])
// before.title = "Before"
// Show(before)

cube.addgrade(1)
var problem = OptimizationProblem(cube)
// surface tension
var la=Area()
//var la=AreaIntegral(fn(x) 1)
var sigma = 3
problem.addenergy(la, prefactor=sigma)
// fixme: potential problem
// gravity
var rho = 1
var g = 9.8
// var laa=AreaIntegral(fn(x) x[2]^2/2)
var laa=AreaIntegral(fn (x) abs(Matrix([0, 0, 1]).inner(normal())) *  (x[2]^2/2))// z's ^2
problem.addenergy(laa, prefactor=rho*g)
//
// adhesion
var deltaSigma = 0.1
var laaa = AreaEnclosed()
//
// regulizer functional
var leq = EquiElement()
// this is the bottom boundary
var bnd=Selection(cube, boundary=true)
problem.addenergy(laaa, selection=bnd, prefactor=-1*deltaSigma)
//
// volume constraint
var lv = VolumeEnclosed()
problem.addconstraint(lv)
//
// grounding energy
fn dist(x,y,z) { return z^2 }
fn grad(x,y,z) { return Matrix([0, 0, 2*z]) }
var zdist = ScalarPotential(dist, grad)
problem.addenergy(zdist, selection=bnd, prefactor=100)
//
fn dist(x,y,z) { return z^2 }
fn grad(x,y,z) { return Matrix([0, 0, 2*z]) }
var ldist = ScalarPotential(dist, grad)
problem.addlocalconstraint(ldist, selection=bnd)
// Set up a regularization problem
var reg = OptimizationProblem(cube)
reg.addenergy(leq)
// for (en in problem.energies) print en.selection
print problem.energies.count()
var opt = ShapeOptimizer(problem, cube)
// regularization
var ropt = ShapeOptimizer(reg, cube)
ropt.fix(bnd)

opt.stepsize = 0.0001
var refmax = 4

for (refiter in 1..refmax) {
    for (i in 1..10) {
      if (refiter<refmax) {
        print "-Regularize"
        ropt.stepsize=0.001/refiter
        ropt.steplimit=0.0001/refiter
        equiangulate(cube)
      }

      print "-Shape"
      opt.conjugategradient(50)
    }

    opt.relax(200)
    
    if (refiter<refmax) {
        // Refinement
        var mr=MeshRefiner([cube, bnd])
        // Set the refiner up
        // args: mesh, field, selection
        
        var refmap=mr.refine()
        // Perform the refinement
        var newbnd=Selection(refmap[cube], boundary=true)
        refmap[bnd]=newbnd
        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [problem, opt]) el.update(refmap) // Update the problem
        // Update our own references
        cube=refmap[cube]; bnd=refmap[bnd] // Update variables
        equiangulate(cube)
    }
    
    /*for (en in problem.energies) {
        if (en.selection != nil) {
            en.selection = bnd
        }
    }
    for (con in problem.constraints) {
        if (con.selection != nil) {
            con.selection = bnd
        }
    }
    for (lcon in problem.localconstraints) {
        if (lcon.selection != nil) {
            lcon.selection = bnd
        }
    }*/
    var ground=Selection(cube, fn (x,y,z) z<=0.0005)
    ground.addgrade(1)
    var mid = plotselection(cube, ground, grade=[1,2])
    mid.title = "Mid"
    Show(mid)
}
var ground=Selection(cube, fn (x,y,z) z<=0.0005)
ground.addgrade(1)
// var after = plotmesh(cube, grade=[0,1,2])
var after = plotselection(cube, ground, grade=[0,1,2])
after.title = "After"
Show(after)