import meshtools
import plot
import optimize
// ???
class WettingExperiment {
    /*
    Wetting Experiment class that encapsulate the experiment model.
    states: 
        self.sigma: double              // prefactor for surface tension 
        self.rho: double                // density of the liquid
        self.g: double                  // gravity in m/s^2
        self.deltaSigma: double         // prefactor for adhesion
        self.cube: MeshBuilder          // mesh of the experiment 
        self.bottom_bound: Selection    // selection of all vertices at bottom bound
        self.problem: OptimizationProblem // problem that defines all the energies and constraint function
        self.regulator: OptimizationProblem // optimizer that makes the vertices evenly spaced 
    */
    init(sigma, rho, g, deltaSigma, refmax) {
        self.sigma = sigma
        self.rho = rho
        self.g = g
        self.deltaSigma = deltaSigma
        self.refmax = refmax
        self._makeCubeMesh()
        self._declareProblem()
        self._declareRegulator()
    }

    /* 
    Show method display the cube that is stored as a property of the Wetting instance
        @param title: String            // the name of the window to be shown
        @param highlightBound: Boolean  // whether to highlight the bound or not
        @param bound: Selection         // the bound to be highlighted in the graphic
    */
    show(title=nil, highlightBound=false, bound=nil) {
        var graphic
        // if high light bound is true, we highlight the bottom bound by default. highl light specified other wise
        if (highlightBound) {
            if (!bound) {bound = self.bottom_bound}
            graphic = plotselection(self.cube, bound, grade=[2])
        }
        else {
            graphic = plotmesh(self.cube, grade=[0,1,2])
        }
        // if no custom title is passed in we show all the param as title
        if (!title) {
            graphic.title = "sigma=${self.sigma}; rho=${self.rho}; g=${self.g}; deltaSigma=${self.deltaSigma}; refmax=${self.refmax}"
        }
        else { 
            graphic.title = title
        }
        // show the graphic
        Show(graphic)
    }

    regularize(refiter, showEachIter=false) {
        self.ropt.stepsize = 0.0001/refiter
        self.ropt.steplimit = 0.0001/refiter
        self.ropt.linesearch(2)
        equiangulate(self.cube)
        if (showEachIter) 
            Show(plotselection(self.cube, self.bottom_bound, grade=[0,1,2]))
    }

    refine(showEachIter=false) {
        var mr=MeshRefiner([self.cube, self.bottom_bound])
        // Set the refiner up
        // args: mesh, field, selection
        
        var refmap=mr.refine()
        // Perform the refinement
        var newbnd=Selection(refmap[self.cube], boundary=true)
        refmap[self.bottom_bound]=newbnd

        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [self.problem, self.opt]) el.update(refmap) // Update the problem

        // Update our own references
        self.cube=refmap[self.cube]; self.bottom_bound=refmap[self.bottom_bound] // Update variable
        // show each iter
        if (showEachIter) 
            Show(plotselection(self.cube, self.bottom_bound, grade=[0,1,2]))
    }

    getopt() {
        return self.opt
    }
    
    getropt() {
        return self.ropt
    }

    /*
    Optimize the mesh with the problem defined and the optimizer defined.
    This method will process the optimization and update self.cube. 
    It will loop self.refmax times.
        @param showEachIter: Boolean        // true to show each result graphic after a refine loop, show nothing otherwise.
    */
    optimize(showEachIter=false) {
        var opt = ShapeOptimizer(self.problem, self.cube)
        opt.stepsize = 0.001
        var ropt = ShapeOptimizer(self.regulator, self.cube)
        ropt.fix(self.bottom_bound)
        opt.relax(100)
        for (refiter in 1..self.refmax) {
            for (i in 1..refiter) {
                if (refiter < self.refmax) {//regularize
                    ropt.stepsize = 0.0001/refiter
                    ropt.steplimit = 0.0001/refiter
                    ropt.linesearch(2)
                    equiangulate(self.cube)
                }
                
                opt.conjugategradient(50)
            }

            if (refiter < self.refmax) {
                print "===Refinement level ${refiter}==="
                if (refiter==self.refmax) break
                // Refinement
                var mr=MeshRefiner([self.cube, self.bottom_bound])
                // Set the refiner up
                // args: mesh, field, selection
                
                var refmap=mr.refine()
                // Perform the refinement
                var newbnd=Selection(refmap[self.cube], boundary=true)
                refmap[self.bottom_bound]=newbnd

                // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
                for (el in [self.problem, opt]) el.update(refmap) // Update the problem

                // Update our own references
                self.cube=refmap[self.cube]; self.bottom_bound=refmap[self.bottom_bound] // Update variable
            }
            
        }
    }

    // gets the cross product
    _getCross(a, b) {
        fn cross(a, b) {
            return Matrix([ a[1]*b[2]-a[2]*b[1],
                            a[2]*b[0]-a[0]*b[2],
                            a[0]*b[1]-a[1]*b[0] ])
        }
        return cross(a, b)
    }

    // returns the contact angle of the ground and the closest face
    contactAngle() {
        var bndLines = self.bottom_bound.idlistforgrade(1)
        var lineToFace = self.cube.connectivitymatrix(2,1)
        var faceToVertex = self.cube.connectivitymatrix(0,2)
        var contactangle = 0

        for (line in bndLines) { // for each line in the boundary
            var face = lineToFace.rowindices(line) // find the face it is attached to
            if (face.count() > 1) {
                //error.throw(Error("NotBndLine","This line is connected to more than one face, its not on the boundary"))
                print("bad lines")
            }
            var vertexNum = faceToVertex.rowindices(face[0]) // find the vertices on that face
            var r0 = self.cube.vertexposition(vertexNum[0])
            var r1 = self.cube.vertexposition(vertexNum[1])
            var r2 = self.cube.vertexposition(vertexNum[2])
            //surface unit Normal
            var N = self._getCross(r1-r0,r2-r1) // calculate the unit normal of the face
            N /= N.norm()
            
            var boundrypts = [] // find the two points on the z=0 plane
            if (abs(r0[2]) < 1e-4) boundrypts.append(r0)
            if (abs(r1[2]) < 1e-4) boundrypts.append(r1)
            if (abs(r2[2]) < 1e-4) boundrypts.append(r2)
            var tangent = boundrypts[0] - boundrypts[1] // this line is on z=0 plane
            var contactVector = self._getCross(N,tangent) // normal cross the z=0 line give us a vector away from the z=0 plane that is on the face
            // the contactvector is a vector
            // contactVector[0] == x
            // arctam returns the angle between these two arguments
            contactangle += arctan(-sqrt(contactVector[0]^2+contactVector[1]^2),abs(contactVector[2])) / bndLines.count()
        }
        
        return contactangle / Pi*180
    }

    /* PRIVATE METHOD: initialize the self.cube property to simply be a cube*/
    _makeCubeMesh() {
        self.cube = PolyhedronMesh(
            [[-0.5,-0.5,0],
            [-0.5,0.5,0],
            [0.5,-0.5,0],
            [0.5,0.5,0],
            [-0.5,-0.5,1],
            [-0.5,0.5,1],
            [0.5,-0.5,1],
            [0.5,0.5,1]],
            [[0,1,5,4],
            [2,3,7,6],
            [1,3,7,5],
            [0,2,6,4],
            [4,5,7,6]])
        self.cube.addgrade(1)
        // defines the bottom bound
        self.bottom_bound = Selection(self.cube, boundary=true)
    }

    showMesh(mesh) {
        var graphic = plotmesh(mesh)
        graphic.title = "mesh"
        Show(graphic)
    }
    
    /* PRIVATE METHOD: declare and set up the problem for the experiment */
    _declareProblem() {
        // initialize optimization problem
        self.problem = OptimizationProblem(self.cube)
        // declare surface tension energy
        var surface_area = Area()
        // declare gravity potential energy
        // TODO: use Bond Number to determine whether the gravity should be accounted
        var gravitational_potential = AreaIntegral(fn(x) abs(Matrix([0,0,1]).inner(normal())) * (x[2]^2)/2)
        // declare adhesion
        var adhesion = AreaEnclosed()
        // declare volume constraint
        var volume_constraint = VolumeEnclosed()
        
        // add all energy and constraint to the problem
        self.problem.addenergy(surface_area, prefactor=self.sigma)
        self.problem.addenergy(gravitational_potential)
        self.problem.addenergy(adhesion, selection=self.bottom_bound, prefactor=-1*self.deltaSigma)
        self.problem.addconstraint(volume_constraint)
    }

    /* PRIVATE METHOD: declare and set up a regulator for the mesh */
    _declareRegulator() {
        // initialize regulator optimization problem
        self.regulator = OptimizationProblem(self.cube)
        // add Equi Element energy to the regulator 
        self.regulator.addenergy(EquiElement())         

        // add constraint that makes all vertices stays at z=0 regulates that so all bounds will stay at z=0
        self.problem.addlocalconstraint(ScalarPotential(fn (x,y,z) z, fn(x,y,z) Matrix([0,0,1])), selection=self.bottom_bound)
    }
}

// var opt 
// for (refiter in 1..4) {
//     for (iter in 1..refiter) {
//         cube.regularize()
//     }
//     cube.refine()
// }
// main

/* 
 * droplet on surface
 */
// var cube = WettingExperiment(10, 1, 9.8, 2, 3) // ~77 degrees
// var cube = WettingExperiment(4, 0, 9.8, -1, 3) // ~127 degrees
// cube.show(title="before, just the cube")
// cube.optimize()
// cube.show(highlightBound=true)
// print "Contact Angle: "
// print cube.contactAngle()


/*
 * droplet on cylinderical shell
 */

var wetting = WettingExperiment(4, 1, 9.8, -1, 4)

var cube = wetting.cube
var ground=Selection(cube, fn (x,y,z) z<=0.0005)
Show(plotselection(cube, ground, grade=[1]))
// var cylinder = AreaMesh(fn (u, v) [v, cos(u), sin(u) - 1], -Pi...Pi:Pi/16, -1..1:0.1, closed=[true, false])

wetting.optimize()

var ground=Selection(cube, fn (x,y,z) z<=0.0005)
ground.addgrade(1)


var cube_graph = plotselection(cube, ground, grade=[0, 1, 2])
Show(cube_graph)
