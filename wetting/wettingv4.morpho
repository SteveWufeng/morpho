import meshtools
import plot
import optimize
import constants

var cube = PolyhedronMesh(
    [[-0.5,-0.5,0],
     [-0.5,0.5,0],
     [0.5,-0.5,0],
     [0.5,0.5,0],
     [-0.5,-0.5,1],
     [-0.5,0.5,1],
     [0.5,-0.5,1],
     [0.5,0.5,1]],
    [[0,1,5,4],
     [2,3,7,6],
     [1,3,7,5],
     [0,2,6,4],
     [4,5,7,6]])

cube.addgrade(1)

var problem = OptimizationProblem(cube)

// surface tension

var la=Area()
//var la=AreaIntegral(fn(x) 1)

var sigma = 2

problem.addenergy(la, prefactor=sigma)

// FIXME: possibly not representing gravity correctly
// gravity

var rho = 1
var g = 9.8

// var laa=AreaIntegral(fn (x) (x[2]^2)/2)
var laa = AreaIntegral(fn(x) abs(Matrix([0,0,1]).inner(normal())) * (x[2]^2)/2)
// problem.addenergy(laa, prefactor=rho*g)

var densityDiff = 997 // 997 kg/mÂ³, density of water
var gravAcc = 9.8 // 9.8 m/s^2 acceleration of gravity
var charLen = 10.000001^(1/3) // volume of the experimental droplet
var surfaceTens = 0.072 // 0.072 N/m, surface tension of water
var nomin = densityDiff * gravAcc * (charLen^2)
var denom = surfaceTens
var bondNum = nomin / denom


// if this number is greater than one, gravity will take over surface tension
if (bondNum > 1) {
    problem.addenergy(laa, prefactor=rho*g)
} // else, neglect gravity



// adhesion

var deltaSigma = 10

var laaa = AreaEnclosed()

// this is the bottom boundary
var bnd=Selection(cube, boundary=true)

problem.addenergy(laaa, selection=bnd, prefactor=-1*deltaSigma)

//
// volume constraint

var lv = VolumeEnclosed()

problem.addconstraint(lv)

//

// grounding energy
// fn dist(x,y,z) { return z^2 }
// fn grad(x,y,z) { return Matrix([0, 0, 2*z]) }

// var zdist = ScalarPotential(dist, grad)

// problem.addenergy(zdist, selection=bnd, prefactor=100)

//

// regulator

var leq = EquiElement()
var reg = OptimizationProblem(cube)
reg.addenergy(leq)

fn dist(x,y,z) { return z^2 }
fn grad(x,y,z) { return Matrix([0, 0, 2*z]) }
var ldist = ScalarPotential(dist, grad)
problem.addlocalconstraint(ldist, selection=bnd)

// for (en in problem.energies) print en.selection

print problem.energies.count()

var opt = ShapeOptimizer(problem, cube)
opt.stepsize = 0.001
opt.steplimit = 0.01
var ropt = ShapeOptimizer(reg, cube)
ropt.fix(bnd)

var optNum = 200
var refmax = 4
for (refiter in 1..refmax) {
    for (i in 1..10) {
        if (refiter < refmax) {
            print "-Regularize"
            ropt.stepsize = 0.0001/refiter
            ropt.steplimit = 0.0001/refiter
            ropt.linesearch(5)
            equiangulate(cube)
        }
        opt.conjugategradient(50)
    }

    if (refiter < refmax) {
        print "===Refinement level ${refiter}==="

        opt.relax(optNum)

        //opt.relax(100*(refiter^2))

        //opt.conjugategradient(100) these throw errors

        //opt.linesearch(100) these throw errors

        if (refiter==refmax) break

        // Refinement
        
        var mr=MeshRefiner([cube, bnd])
        // Set the refiner up
        // args: mesh, field, selection
        
        var refmap=mr.refine()
        // Perform the refinement

        var newbnd=Selection(refmap[cube], boundary=true)
        refmap[bnd]=newbnd

        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [problem, opt]) el.update(refmap) // Update the problem

        // Update our own references
        cube=refmap[cube]; bnd=refmap[bnd] // Update variables

    }
    // Show(plotselection(cube, bnd, grade=[0,1,2]))
}

// ground
var ground=Selection(cube, fn (x,y,z) z<=0.0005)
ground.addgrade(1)

// create a selection right above the bottom boundary
var angle = Selection(cube, fn (x,y,z)  z<=0.2)
angle.addgrade(1)

// contact angle calculation
// get the lines on the boundary
var bndlines = bnd.idlistforgrade(1)
var lineToFace = cube.connectivitymatrix(2,1)
var faceToVertex = cube.connectivitymatrix(0,2)
var contactangle = 0

fn cross(a, b) {
    return Matrix([ a[1]*b[2]-a[2]*b[1],
                    a[2]*b[0]-a[0]*b[2],
                    a[0]*b[1]-a[1]*b[0] ])
}

for (line in bndlines) { // for each line in the boundary
    var face = lineToFace.rowindices(line) // find the face it is attached to
    if (face.count()>1) {
        // throw(Error("NotBndLine","This line is connected to more than one face, its not on the boundary"))
    print "bad line, not on bnd"
    }
    var vertexNum = faceToVertex.rowindices(face[0]) // find the vertices on that face
    var r0 = cube.vertexposition(vertexNum[0])
    var r1 = cube.vertexposition(vertexNum[1])
    var r2 = cube.vertexposition(vertexNum[2])
    //surface unit Normal
    var N = cross(r1-r0,r2-r1) // calculate the unit normal of the face
    N /=N.norm()

    var boundrypts = [] // find the two points on the z = 0 plane
    if (abs(r0[2])<1e-4) boundrypts.append(r0)
    if (abs(r1[2])<1e-4) boundrypts.append(r1)
    if (abs(r2[2])<1e-4) boundrypts.append(r2)
    var tangent = boundrypts[0]-boundrypts[1] // this line is on z=0 plane
    var contactVector = cross(N,tangent) // normal cross the z=0 line give us a vector away from the z=0 plane that is on the face

    contactangle+=arctan(-sqrt(contactVector[0]^2+contactVector[1]^2),abs(contactVector[2]))/bndlines.count()

}

print contactangle/Pi*180

//Show(plotselection(cube, ground, grade=[0,1,2]))
var graphic = plotselection(cube, bnd, grade=[0,1,2])
graphic.title = "sigma=${sigma}; rho=${rho}; g=${g}; deltaSigma=${deltaSigma}; itermax=${refmax}"
Show(graphic)
