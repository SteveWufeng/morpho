import meshtools
import plot
import optimize

var m = PolyhedronMesh(
    [[-0.5,-0.5,0],
     [-0.5,0.5,0],
     [0.5,-0.5,0],
     [0.5,0.5,0],
     [-0.5,-0.5,1],
     [-0.5,0.5,1],
     [0.5,-0.5,1],
     [0.5,0.5,1]],
    [[0,1,5,4],
     [2,3,7,6],
     [1,3,7,5],
     [0,2,6,4],
     [4,5,7,6]])

// adds edge grade
m.addgrade(1)

// Define optimization problem
var problem = OptimizationProblem(m)

// Create functionals
// Surface tension
var la = Area()
var sigma = 3
// Gravity
var rho = 1
var g = 9.8
var laa=AreaIntegral(fn (x) (x[2]^2)/2) // z's ^2
// Adhesion
var deltaSigma = 0.1
var laaa = AreaEnclosed()
// Regulizer functional
var leq = EquiElement()

// boundary seletctions
var bnd=Selection(m, boundary=true)

// volume constraint
var lv = VolumeEnclosed()

// grounding energy
fn dist(x,y,z) { return z^2 }
fn grad(x,y,z) { return Matrix([0, 0, 2*z]) }
var zdist = ScalarPotential(dist, grad)

var itermax = 4

// Set up the optimization problem
problem.addenergy(la, prefactor=sigma)
problem.addenergy(laa, prefactor=rho*g)
problem.addenergy(laaa, selection=bnd, prefactor=-1*deltaSigma)
problem.addenergy(zdist, selection=bnd, prefactor=100)
problem.addconstraint(lv)

// Set up a regularization problem
var reg = OptimizationProblem(m)
reg.addenergy(leq)

var opt = ShapeOptimizer(problem, m)
// regularization
var ropt = ShapeOptimizer(reg, m)
ropt.fix(bnd)

// Set up initial stepsize
opt.stepsize=0.05
opt.steplimit=0.1

var mr, refmap // Refinement

// Main optimization loop
for (iter in 1..itermax) {
  for (i in 1..10) {
      if (iter<itermax) {
        print "-Regularize"
        ropt.stepsize=0.0001/iter
        ropt.steplimit=0.0001/iter
        ropt.linesearch(2)
        equiangulate(m)
      }

      print "-Shape"
      opt.relax(100)
  }

  // Refine if necessary
  if (iter<itermax) {
    // Create a mesh refiner
    mr=MeshRefiner([m, bnd])
    
       refmap = mr.refine()
    

    // Now refinement is done update the problems and optimizers
    for (el in [problem, reg, opt, ropt]) el.update(refmap)

    // Use the new mesh and field
    m = refmap[m]
    bnd = refmap[bnd]
    // Must ensure boundary remains correctly fixed
    ropt.fixed=[]
    ropt.fix(Selection(m, boundary=true))

    // Equiangulate
    equiangulate(m)
    }
  // Reduce stepsize
  opt.stepsize=0.05/iter
  opt.steplimit=0.1/iter
}
    
Show(plotmesh(m, grade=[0,1,2]))