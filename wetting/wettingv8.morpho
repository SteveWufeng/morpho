import meshtools
import plot
import optimize
/*
Wetting Experiment class that encapsulate the experiment model.
states: 
    self.sigma: double              // prefactor for surface tension 
    self.rho: double                // density of the liquid
    self.g: double                  // gravity in m/s^2
    self.deltaSigma: double         // prefactor for adhesion
    self.r: double                  // radius of the cylinder(surface)
    self.cube: MeshBuilder          // mesh of the experiment 
    self.bottom_bound: Selection    // selection of all vertices at bottom bound
    self.problem: OptimizationProblem // problem that defines all the energies and constraint function
    self.regulator: OptimizationProblem // optimizer that makes the vertices evenly spaced 
    self.opt: ShapeOptimizer            // Shape optimizer that updates the mesh based on the problem
    self.ropt: ShapeOptimizer           // Shape optimizer that regulate the mesh based on requests
    self.delta_cylinder: Double         // Width(thickness) of the cylinder(surface)
methods:
    show(title=nil, highlightBound=false, bound=nil)    // show the visual of self.cube
    regularize(refiter, showEachIter=false)             // regularize method that regularize the mesh.
    refine(showEachIter=false)                          // refine method that refines the mesh.
    getopt()                                            // accessor for self.opt
    getropt()                                           // accessor for self.ropt
    contactAngle()                                      // find contact angle of the cube
*/
class WettingExperiment {
    /*
    Constructor for a Wetting Experiment.
    Set up everything for a wetting experiment model.
        @param sigma: double              // prefactor for surface tension 
        @param rho: double                // density of the liquid
        @param g: double                  // gravity in m/s^2
        @param deltaSigma: double         // prefactor for adhesion
        @param r: double                  // radius of the surface -- we are testing on a cylinder(6/7 )
    */
    init(sigma, rho, g, deltaSigma, r) {
        self.sigma = sigma
        self.rho = rho
        self.g = g
        self.deltaSigma = deltaSigma
        self.r = r
        self.delta_cylinder = 0.1
        self._makeCubeMesh()
        self._declareProblem()
        self._declareRegulator() // commented out for checking how it would look without regulator
        self._setupOptimization()
    }

    /* 
    Show method display the cube that is stored as a property of the Wetting instance
        @param title: String            // the name of the window to be shown
        @param highlightBound: Boolean  // whether to highlight the bound or not
        @param bound: Selection         // the bound to be highlighted in the graphic
    */
    show(title=nil, highlightBound=false, bound=nil) {
        var graphic
        // if high light bound is true, we highlight the bottom bound by default. highl light specified other wise
        if (highlightBound) {
            if (!bound) {bound = self.bottom_bound}
            graphic = plotselection(self.cube, bound, grade=[0,1,2])
        }
        else {
            graphic = plotmesh(self.cube, grade=[0,1,2])
        }
        // if no custom title is passed in we show all the param as title
        if (!title) {
            graphic.title = "sigma=${self.sigma}; rho=${self.rho}; g=${self.g}; deltaSigma=${self.deltaSigma}"
        }
        else { 
            graphic.title = title
        }
        // show the graphic
        Show(graphic)
    }

    /*
    Regularize method that regularize the mesh.
    This regularization will try to make sure each triangle
    are equiangulated. regularization is based on set up of self.ropt
        @param showEachIter: Boolean        // true to show each result graphic after a refine loop, show nothing otherwise.
    */
    regularize(refiter, showEachIter=false) {
        self.ropt.stepsize = 0.0001/refiter
        self.ropt.steplimit = 0.0001/refiter
        self.ropt.linesearch(2)
        equiangulate(self.cube)
        if (showEachIter) 
            Show(plotselection(self.cube, self.bottom_bound, grade=[0,1,2]))
    }
    /*
    Refine method that refines the mesh.
    This will add extra verticies and make more triangle for the mesh
    It will refine based on the defined problem
    This function will also update the self.cube mesh
        @param showEachIter: Boolean        // true to show each result graphic after a refine loop, show nothing otherwise.
    */
    refine(showEachIter=false) {
        var mr=MeshRefiner([self.cube, self.bottom_bound])
        // Set the refiner up
        // args: mesh, field, selection
        
        var refmap=mr.refine()
        // Perform the refinement
        // center of the cylinder 00 -r -1/2
        var newbnd=Selection(refmap[self.cube], fn(x,y,z) self.delta_cylinder>abs(((z+self.r+0.5))^2 + (y)^2)^(1/2)-self.r)
        self.delta_cylinder = self.delta_cylinder/2
        refmap[self.bottom_bound]=newbnd

        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [self.problem, self.opt]) el.update(refmap) // Update the problem

        // Update our own references
        self.cube=refmap[self.cube]; self.bottom_bound=refmap[self.bottom_bound] // Update variable
        // show each iter
        if (showEachIter) 
            // Show(plotselection(self.cube, self.bottom_bound, grade=[0,1,2]))
            self.show(highlightBound=true)
    }

    /* 
    Accessor for self.opt, used for customizing states and accessing methods of the shape optimizer
        @return self.opt        // this is the shape optimizer of the cube
    */
    getopt() {
        return self.opt
    }
    
    /* 
    Accessor for self.ropt, used for customizing states and accessing methods of the regulator optimizer
        @return self.ropt        // this is the regulator optimizer of the cube
    */
    getropt() {
        return self.ropt
    }

    /*
    A method that calculates and return the contact angle between the bottom and the face of
    the bottom bound lines.
        @return contactAngle: Double        // the contact angle between surface and the droplet
    */
    contactAngle() {
        var bndLines = self.bottom_bound.idlistforgrade(1)
        var lineToFace = self.cube.connectivitymatrix(2,1)
        var faceToVertex = self.cube.connectivitymatrix(0,2)
        var contactangle = 0

        for (line in bndLines) { // for each line in the boundary
        var face = lineToFace.rowindices(line) // find the face it is attached to
        if (face.count()>1) {
            // throw(Error("NotBndLine","This line is connected to more than one face, its not on the boundary"))
        print "bad line, not on bnd"
        }
        var vertexNum = faceToVertex.rowindices(face[0]) // find the vertices on that face
        var r0 = self.cube.vertexposition(vertexNum[0])
        var r1 = self.cube.vertexposition(vertexNum[1])
        var r2 = self.cube.vertexposition(vertexNum[2])

        var boundrypts = [] // find the two points on the z = 0 plane
        var notboundrypt
        if (abs(r0[2]) < 1e-4) boundrypts.append(r0) else notboundrypt = r0
        if (abs(r1[2]) < 1e-4) boundrypts.append(r1) else notboundrypt = r1
        if (abs(r2[2]) < 1e-4) boundrypts.append(r2) else notboundrypt = r2
        var midpt = (boundrypts[0]+boundrypts[1])/2

        var contactVector = notboundrypt - midpt;

        contactangle += (Pi - acos(midpt.inner(contactVector)/(midpt.norm()*contactVector.norm())))/ bndLines.count()

        }
        
        return contactangle / Pi*180
    }

    /* 
    PRIVATE METHOD: Set up self.opt and self.ropt. User can customize the optimizer
    by accessing getopt() or getropt() and modify their states and access their 
    methods.
    */
    _setupOptimization() {
        self.opt = ShapeOptimizer(self.problem, self.cube)
        self.opt.stepsize = 0.001
        self.ropt = ShapeOptimizer(self.regulator, self.cube) 
        self.ropt.fix(self.bottom_bound)                
    }
    /*
    PRIVATE METHOD: gets the cross product
        @param a: Matrix    // Matrix A
        @param b: Matrix    // Matrix B
        @return cross(): function // returns a packed function of matrix
    */
    _getCross(a, b) {
        fn cross(a, b) {
            return Matrix([ a[1]*b[2]-a[2]*b[1],
                            a[2]*b[0]-a[0]*b[2],
                            a[0]*b[1]-a[1]*b[0] ])
        }
        return cross(a, b)
    }

    /* PRIVATE METHOD: initialize the self.cube property to simply be a cube*/
    _makeCubeMesh() {
        self.cube = PolyhedronMesh(
            [[-0.5,-0.5,-0.5],
            [-0.5,0.5,-0.5],
            [0.5,-0.5,-0.5],
            [0.5,0.5,-0.5],
            [-0.5,-0.5,0.5],
            [-0.5,0.5,0.5],
            [0.5,-0.5,0.5],
            [0.5,0.5,0.5]],
            [
            [0,1,3,2],
            [0,1,5,4],
            [2,3,7,6],
            [1,3,7,5],
            [0,2,6,4],
            [4,5,7,6]])
        self.cube.addgrade(1)
        // defines the bottom bound
        self.bottom_bound = Selection(self.cube, fn(x,y,z) 0.1>abs(((z+self.r+0.5))^2 + (y)^2)^(1/2)-self.r)
        self.bottom_bound.addgrade(0)
        self.bottom_bound.addgrade(1)
        self.bottom_bound.addgrade(2)
    }
    
    /* PRIVATE METHOD: declare and set up the problem for the experiment */
    _declareProblem() {
        // initialize optimization problem
        self.problem = OptimizationProblem(self.cube)
        // declare surface tension energy
        var delta_sigma_minus_sigma = self.deltaSigma - self.sigma // should be negative
        var surface_area_bottom = Area()
        var surface_area_air = Area()
        // declare gravity potential energy
        var gravitational_potential = AreaIntegral(fn(x) abs(Matrix([0,0,1]).inner(normal())) * (x[2]^2)/2)
        // declare adhesion
        var adhesion = Area()
        // declare volume constraint
        var volume_constraint = VolumeEnclosed()
        
        // add all energy and constraint to the problem
        self.problem.addenergy(surface_area_bottom, selection=self.bottom_bound, prefactor=delta_sigma_minus_sigma)
        self.problem.addenergy(surface_area_air, prefactor=self.sigma)

        // gravity
        self.problem.addenergy(gravitational_potential, prefactor=self.rho*self.g)
        self.problem.addconstraint(volume_constraint)

        // add constraint that makes all vertices stays at z=0 regulates that so all bounds will stay at z=0
        // local constraint are usually applied for each vertex/edge/face. example in this case,
        // the local constraint tells every vertices at the bound to go to z = 1.
        self.problem.addlocalconstraint(ScalarPotential(fn (x,y,z) y^2+(z+0.5+self.r)^2-self.r^2, fn(x,y,z) Matrix([0,2*y,2*(z+0.5+self.r)])), selection=self.bottom_bound)
    }

    /* PRIVATE METHOD: declare and set up a regulator for the mesh */
    _declareRegulator() {
        // initialize regulator optimization problem
        self.regulator = OptimizationProblem(self.cube)
        // add Equi Element energy to the regulator 
        self.regulator.addenergy(EquiElement())         

    }

    /* For debug usage, this method prints out all the gradienst in the problem */
    printGradients() {
        print "\n energy gradients"
        for (el in self.problem.energies) print self.opt.gradient(el)
        print "\n constraint gradients"
        for (el in self.problem.constraints) print self.opt.gradient(el)
        print "\n local constraint gradients"
        for (el in self.problem.localconstraints) print self.opt.gradient(el)
    }
}


// main
// surface - surface does not do anything, just shows
var r = 1
var surface = AreaMesh(fn (u, v) [v, r*cos(u), r*sin(u)-r-0.5], -Pi...Pi:Pi/16, -3..3:0.1, closed=[true, false])
var surface_graphic = plotmesh(surface, grade = [1,2])

// cube and optimize
//WettingExperiment(sigma, density, gravity, deltaSigma, radius)
var params = [
    // [7, 0, 9.8, 1, r] // round droplet shape
    // [1, 0, 9.8, 0, r] // cube shape
    // [10, 10, 9.8, 4, r] // hot airballoon shape
    [10, 20, 9,8, 4, r] // still a balloon shape, it could be that the selection is pulling down too much
]

var cube = WettingExperiment(params[0][0], params[0][1], params[0][2], params[0][3], params[0][4])

var opt = cube.getopt()
var ropt = cube.getropt() // commented out for checking how it would look without regulator

// cube.show(highlightBound=true)

// notes: is surface tension too high?

var refmax = 4
var itermax = 1
opt.relax(100)
for (refiter in 1..refmax) {
    //cube.printGradients()
    // opt.conjugategradient(10)
    if (refiter < refmax) {
        print "===Refinement level ${refiter}==="
        if (refiter == refmax) break
        cube.refine(showEachIter=true)
        opt.relax(130)
    }
    for (iter in 1..itermax) {
        cube.regularize(iter)
        // cube.printGradients()
    }
}

// cube.show(highlightBound=true)
// print cube.contactAngle()

var cube_graphic = plotselection(cube.cube, cube.bottom_bound, grade = [0,1,2])

Show(cube_graphic+surface_graphic)
// Show(cube_graphic)