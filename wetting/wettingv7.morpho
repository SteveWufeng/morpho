import meshtools
import plot
import optimize

var sigma = 3 // surface tension
var rho = 1 // density
var g = 9.8 // gravity
var deltaSigma = 0.1 // adhesion
var cube = PolyhedronMesh(
    [
     [-0.5,-0.5,-0.5],
     [-0.5,0.5,-0.5],
     [0.5,-0.5,-0.5],
     [0.5,0.5,-0.5],
     [-0.5,-0.5,0.5],
     [-0.5,0.5,0.5],
     [0.5,-0.5,0.5],
     [0.5,0.5,0.5]
     ],
    [
     [0,1,3,2],
     [0,1,5,4],
     [2,3,7,6],
     [1,3,7,5],
     [0,2,6,4],
     [4,5,7,6]
     ])
cube.addgrade(1)
var bndThres = 1e-6
//var top=Selection(cube, fn (x,y,z) abs(cylPot(x,y,z)) > bndThres)
//top.addgrade(1)
//top.addgrade(2)


// selecting the bottom face of the cube
var initBottom=Selection(cube, fn (x,y,z) z < -0.5 + 1e-4)
// if printing, show this bounds vertices
initBottom.addgrade(1)


// cylinder grounding constraint
var r = 2
// the functions that represent a cylinder
fn cylPot(x,y,z) { return (y^2)+(z+0.5+r)^2-r^2 }
fn cylPotGrad(x,y,z) { return Matrix([0, 2*y, 2*(z+0.5+r)]) }

//scalar potential for surface pinning
var ldist = ScalarPotential(cylPot, cylPotGrad)

// surface tension
var la=Area()
// gravity
// we want the facet area parallel to the xy plane
// dot [0,0,1] with the normal vector (which is proportional to the facet's area) and multiply by (z^2)/2
var laa=AreaIntegral(fn (x) abs(Matrix([0,0,1]).inner(normal())) * (x[2]^2)/2)
// adhesion
var laaa = Area() 
// volume constraint
var lv = VolumeEnclosed()
var initProblem = OptimizationProblem(cube)

// adds the cube must touch the cylinder as a local
initProblem.addlocalconstraint(ldist, selection=initBottom)


initProblem.addenergy(la, prefactor=sigma)
initProblem.addenergy(laa, prefactor=rho*g)
initProblem.addenergy(laaa, selection=initBottom, prefactor=-1*deltaSigma)
initProblem.addconstraint(lv)
var initOpt = ShapeOptimizer(initProblem, cube)
initOpt.stepsize = 0.001
// regularization energy and separate optimization problem
var leq=EquiElement()
var reg = OptimizationProblem(cube)
reg.addenergy(leq)
var ropt = ShapeOptimizer(reg, cube)

initOpt.relax(10)
// initial relax

var refmax = 2
for (refiter in 1..refmax) {
    print "===Refinement level ${refiter}==="
    //var mr=MeshRefiner([cube, top, bottom])
    var mr=MeshRefiner([cube, initBottom])
    var refmap=mr.refine()
    //var newtop=Selection(refmap[cube], fn (x,y,z) abs(cylPot) > bndThres)
    //newtop.addgrade(1)
    var newInitBottom=Selection(refmap[cube], fn (x,y,z) z < -0.5 + 1e-4)
    newInitBottom.addgrade(1)
    //refmap[top]=newtop
    refmap[initBottom]=newInitBottom
    for (el in [initProblem, initOpt]) el.update(refmap)
    cube=refmap[cube]
    //top=refmap[top]
    initBottom=refmap[initBottom]
    initOpt.relax(10)
}
var bottom=Selection(cube, fn (x,y,z) abs(cylPot(x,y,z)) < bndThres)
bottom.addgrade(1)
var problem = OptimizationProblem(cube)
problem.addlocalconstraint(ldist, selection=bottom)
problem.addenergy(la, prefactor=sigma)
problem.addenergy(laa, prefactor=rho*g)
problem.addenergy(laaa, selection=bottom, prefactor=-1*deltaSigma)
problem.addconstraint(lv)
var opt = ShapeOptimizer(problem, cube)
opt.stepsize = 0.001
for (i in 1..10) {
    print "-Regularize ${i}"
    leq.weight=la.integrand(cube)
    ropt.linesearch(2)
    equiangulate(cube)
    for (i in 1..50) {
        opt.relax(1)
        for (en in problem.energies) {
            if (en.selection != nil) {
                en.selection = bottom
            }
        }
        for (con in problem.constraints) {
            if (con.selection != nil) {
                con.selection = bottom
            }
        }
        for (lcon in problem.localconstraints) {
            if (lcon.selection != nil) {
                lcon.selection = bottom
            }
        }
    }
}

// selects vertices above z = 1e-4, could be after refinement only
var testSelection = Selection(cube, fn (x,y,z) z > -0.5)
testSelection.addgrade(2)

var bndVertices = testSelection.idlistforgrade(0) // list of verticies of the selection
var lineToFace = cube.connectivitymatrix(2,1) // gets all the edges connecting faces
var faceToVertex = cube.connectivitymatrix(0,2) // gets al the faces connecting to vertex
var sel2 = []
for (v in testSelection) {
    var vertex = lineToFace.rowindices(v)
    // get the vertices 
    // and see what vertices have one connection
    if ()
    // if the neighbor is not in testSelection, add it to selection2
}

Show(plotselection(cube, testSelection, grade=[0,1,2]))

// fn visualize(mesh, grade, bnd=nil, title=nil) {
//     var g
//     if (bnd != nil) {
//         g = plotselection(
//             mesh,
//             bnd,
//             grade
//         )
//     }
//     else {
//         g = plotmesh(
//             mesh,
//             grade
//         )
//     }
//     g.title = title
//     return g
// }

var graph = plotselection(cube, testSelection, grade=[0,1,2])
var cyl = AreaMesh(fn (u, v) [v, r*cos(u), r*sin(u)-r-0.5], -Pi...Pi:Pi/16, -3..3:0.1, closed=[true, false])
var g2 = plotmesh(cyl)
var gcomb = graph + g2
gcomb.title="sigma=${sigma}, rho=${rho}, g=${g}, deltaSigma=${deltaSigma}, r=${r}"
Show(gcomb)
//var bndVertices = bnd.idlistforgrade(0)
//print bndVertices
//print cube.connectivitymatrix(0,1)


/*
issues, how to remove the extra surface tension caused by considering 
a bottom face. the gravity. creating a cylinder
*/
